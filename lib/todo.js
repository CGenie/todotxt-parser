// Generated by CoffeeScript 1.10.0
(function() {
  var Todo, TodoItem,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  TodoItem = (function() {
    function TodoItem(params) {
      this.priority = params != null ? params.priority : void 0;
      this.creationDate = params != null ? params.creationDate : void 0;
      this.description = params != null ? params.description : void 0;
      this.dueDate = params != null ? params.dueDate : void 0;
      this.project = params != null ? params.project : void 0;
      this.contexts = (params != null ? params.contexts : void 0) || [];
    }

    TodoItem.prototype.render = function() {
      var context, ret;
      ret = "";
      if (this.priority) {
        ret += "(" + this.priority + ") ";
      }
      ret += this.description;
      if (this.dueDate || this.project || this.contexts.length > 0) {
        ret += " ";
      }
      if (this.project) {
        ret += "+" + this.project;
        if (this.contexts.length > 0) {
          ret += " ";
        }
      }
      ret += ((function() {
        var i, len, ref, results;
        ref = this.contexts;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          context = ref[i];
          results.push("@" + context);
        }
        return results;
      }).call(this)).join(" ");
      return ret;
    };

    TodoItem.prototype.validate = function() {
      if (!this.description) {
        return false;
      }
      return true;
    };

    TodoItem.parse = function(text) {
      var c, contextRe, contexts, description, priority, priorityRe, project, projectRe, ref, ref1;
      if (text == null) {
        text = '';
      }
      text = text.trim();
      if (indexOf.call(text, '\n') >= 0) {
        return null;
      }
      priorityRe = /\([ABC]\)/;
      priority = (ref = text.match(priorityRe)) != null ? ref[0] : void 0;
      if (priority) {
        priority = priority[1];
      }
      description = text.replace(priorityRe, '').trim();
      contextRe = /\@\w+/g;
      contexts = (function() {
        var i, len, ref1, results;
        ref1 = text.match(contextRe) || [];
        results = [];
        for (i = 0, len = ref1.length; i < len; i++) {
          c = ref1[i];
          results.push(c.slice(1));
        }
        return results;
      })();
      description = description.replace(contextRe, '').trim();
      projectRe = /\+\w+/;
      project = (ref1 = text.match(projectRe)) != null ? ref1[0] : void 0;
      if (project) {
        project = project.slice(1);
      }
      description = description.replace(projectRe, '').trim();
      return new TodoItem({
        priority: priority,
        description: description,
        project: project,
        contexts: contexts
      });
    };

    return TodoItem;

  })();

  Todo = (function() {
    function Todo(params) {
      var text;
      this.items = (function() {
        var i, len, ref, results;
        ref = (params != null ? params.items : void 0) || [];
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          text = ref[i];
          results.push(TodoItem.parse(text));
        }
        return results;
      })();
    }

    Todo.prototype.render = function() {
      var item;
      return ((function() {
        var i, len, ref, results;
        ref = this.items;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          results.push(item.render());
        }
        return results;
      }).call(this)).join("\n");
    };

    return Todo;

  })();

  exports.TodoItem = TodoItem;

  exports.Todo = Todo;

}).call(this);
